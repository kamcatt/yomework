#Requierements 


-configure Vault PKI 
-generate certificate through the API 
-add the certificate to nginx > initialy manually > through a wrapper script 

****************************************************************************

#Steps

1. Spined up Vault docker container

docker run --name demo-vault -p 8200:8200 vault \
server -dev -dev-root-token-id="root" &

---------------------------------------
2. Generated ROOT certificate 

export VAULT_ADDR=http://localhost:8200
export VAULT_TOKEN=root
export VAULT_NAMESPACE=

#enabled Vault PKI secret engine 
vault secrets enable pki

#set default ttl
vault secrets tune -max-lease-ttl=87600h pki

#generated root CA
vault write -format=json pki/root/generate/internal \
common_name="yomework.com" ttl=8760h  > pki-ca-root.json

#saved the certificate in a sepearate file, to be added later as trusted to our browser/computer
cat pki-ca-root.json | jq -r .data.certificate > ca.pem

#published urls for the root ca
vault write pki/config/urls \
        issuing_certificates="http://127.0.0.1:8200/v1/pki/ca" \
        crl_distribution_points="http://127.0.0.1:8200/v1/pki/crl"

#vault secrets disable pki

---------------------------------------      
3. Generate INTERMEDIATE certificate

#enabled pki secret engine for intermediate CA
vault secrets enable -path=pki_int pki

#set default ttl
vault secrets tune -max-lease-ttl=43800h pki_int

#created intermediate CA with common name yomework.com and 
#saved the CSR (Certificate Signing Request) in a seperate file
vault write -format=json pki_int/intermediate/generate/internal \
        common_name="yomework.com Intermediate Authority" \
        | jq -r '.data.csr' > pki_intermediate.csr

#sent the intermediate CA's CSR to the root CA for signing
#saved the generated certificate in a sepearate file         
vault write -format=json pki/root/sign-intermediate csr=@pki_intermediate.csr \
        format=pem_bundle ttl="43800h" \
        | jq -r '.data.certificate' > intermediate.cert.pem


#published the signed certificate back to the Intermediate CA
vault write pki_int/intermediate/set-signed certificate=@intermediate.cert.pem

#published the intermediate CA urls
vault write pki_int/config/urls \
     issuing_certificates="http://127.0.0.1:8200/v1/pki_int/ca" \
     crl_distribution_points="http://127.0.0.1:8200/v1/pki_int/crl"

#vault secrets disable pki_int

---------------------------------------   
4. Created a ROLE to generate new certificates 

vault write pki_int/roles/yomework-dot-com \
        allowed_domains="yomework.com" \
        allow_subdomains=true \
        max_ttl="720h"

#vault delete pki_int/roles/yomework-dot-com
---------------------------------------
5. Created a new POLICY to create update revoke and list certificates

vault policy write pki_int pki_int.hcl

---------------------------------------
6. Created USERNAME and password 

export VAULT_ADDR=http://localhost:8200
export VAULT_TOKEN=root
export VAULT_NAMESPACE=
export VAULT_USER="emi"
export VAULT_PASSWORD="password"

#enabled userpass to create an authentication method for creating and managing certificates
vault auth enable userpass

#created a new username and password with the policy we created earlier
vault write auth/userpass/users/${VAULT_USER} \
    password=${VAULT_PASSWORD} \
    token_policies="pki_int"

#vault auth disable userpass

---------------------------------------
7. Generate certificate 

export VAULT_ADDR=http://localhost:8200
export VAULT_USER="emi"
export VAULT_PASSWORD="password"

vault login -format=json -method=userpass \
    username=${VAULT_USER} \
    password=${VAULT_PASSWORD} | jq -r .auth.client_token > user.token

#stored the token as env variable, now this token can be used to authenticate against Vault
export VAULT_TOKEN=`cat user.token`

#used the new token to generate a new certificate and store it in a file
vault write -format=json pki_int/issue/yomework-dot-com \
    common_name=test.yomework.com > test.yomework.com.crt

#extracted the certificate, issuing ca in the pem file and private key in the key file seperately
cat test.yomework.com.crt | jq -r .data.certificate > web-server/certs/test.yomework.pem
cat test.yomework.com.crt | jq -r .data.issuing_ca >> web-server/certs/test.yomework.pem
cat test.yomework.com.crt | jq -r .data.private_key > web-server/certs/test.yomework.key

#extracted the certificate, issuing ca in the pem file and private key in the key file seperately, through the API 

curl --header "X-Vault-Token: $VAULT_TOKEN" \
    --request POST \
    --data '{"common_name": "test.yomework.com", "ttl": "24h"}' \
    $VAULT_ADDR/v1/pki_int/issue/yomework-dot-com | jq -r .data.certificate > test.yomework.pem

curl --header "X-Vault-Token: $VAULT_TOKEN" \
    --request POST \
    --data '{"common_name": "test.yomework.com", "ttl": "24h"}' \
    $VAULT_ADDR/v1/pki_int/issue/yomework-dot-com | jq -r .data.issuing_ca >> test.yomework.pem


curl --header "X-Vault-Token: $VAULT_TOKEN" \
    --request POST \
    --data '{"common_name": "test.yomework.com", "ttl": "24h"}' \
    $VAULT_ADDR/v1/pki_int/issue/yomework-dot-com | jq -r .data.private_key > test.yomework.key

---------------------------------------
8. Spined up a new Nginx container

#added the test.yomework.key & test.yomework.pem in the /root/yomework/certs folder
#added my own conf file yomework.conf to the /root/yomework/conf.d folder

docker run -v /root/yomework/certs:/etc/nginx/certs \
-v /root/yomework/conf.d:/etc/nginx/conf.d  \
 --name test.yomework.com -p 80:80 -p 443:443 nginx &
 
 ---------------------------------------
 9. Used the API to download the ROOT and INTERMEDIATE certificates and manually added them to the certmgr in Windows. 
 
 http://VMIPADDRESS:8200/v1/pki/ca
 http://VMIPADDRESS:8200/v1/pki_int/ca
